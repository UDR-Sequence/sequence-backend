spring:
  application:
    name: sequence_member
  config:
    import: optional:file:.env[.properties]

  mail:
    host: smtp.naver.com
    port: 465
    username: ${NAVER_MAIL_USERNAME}
    password: ${NAVER_MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          ssl:
            enable: true
          ssl.trust: smtp.naver.com
    debug: true

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true
        naming:
          physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
    database-platform: org.hibernate.dialect.MariaDBDialect
    # show-sql: true

  datasource:
    url: ${DATABASE_URL}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}
    driver-class-name: ${DATABASE_DRIVER}

  servlet:
    multipart:
      enabled: true
      max-file-size: ${MAX_FILE_SIZE}
      max-request-size: ${MAX_REQUEST_SIZE}

  jwt:
    secret: ${JWT_SECRET}

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: ${GOOGLE_REDIRECT_URI}
        provider:
          google:
            authorization-uri: ${GOOGLE_AUTHORIZATION_URI}
            token-uri: ${GOOGLE_TOKEN_URI}
            user-info-uri: ${GOOGLE_USER_INFO_URI}
  server:
    servlet:
      session:
        cookie:
          same-site: None
          secure: false # 로컬 HTTP 환경에서'false'로 설정
          httponly: true

  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}
      timeout: 6000ms


minio:
  endpoint: ${MINIO_ENDPOINT}
  accessKey: ${MINIO_ACCESS_KEY}
  secretKey: ${MINIO_SECRET_KEY}
  bucketName: ${MINIO_BUCKET_NAME}
  portfolio_bucketName : ${MINIO_PORTFOLIO_BUCKET_NAME}
  archive_img: ${MINIO_ARCHIVE_IMG}       # 이 속성 추가
  archive_thumbnail: ${MINIO_ARCHIVE_THUMBNAIL}  # 필요하다면 이것도 추가

management:
  server:
    port: 10100
  endpoints:
    web:
      exposure:
        include: "*"
        # /actuator/ 이하의 모든 엔드포인트 노출 설정
  endpoint:
    health:
      show-details: always
      # 이 설정은 /actuator/health 엔드포인트에서 헬스 체크 정보를 항상 상세히 보여주도록 설정합니다. 기본적으로, 헬스 체크 엔드포인트는 요약된 상태 정보만 제공하며, 상세 정보는 노출되지 않습니다.
    prometheus:
      enabled: true

  prometheus:
    metrics:
      export:
        enabled: true
server:
  tomcat:
    mbeanregistry:
      enabled: true
